  // This is your Prisma schema file,
  // learn more about it in the docs: https://pris.ly/d/prisma-schema

  // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
  // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
  }

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  image           String?
  role            UserRole  @default(USER)
  bio             String?
  rating          Float     @default(0)
  reviews         Review[]  @relation("UserReviews")
  receivedReviews Review[]  @relation("ReceivedReviews")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  profile         Profile?
  sentMessages    Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  listings        Listing[]
  subscription    Subscription? // Relation un-à-un
  sentRequests     Request[] @relation("UserRequests")
  receivedRequests Request[] @relation("ConciergeRequests")
  specialties     Specialty[]
  premiumFeatures   PremiumFeatures?
  products        Product[]
  services        Service[]
}

  model Profile {
    id                 String   @id @default(cuid())
    userId             String   @unique
    user               User     @relation(fields: [userId], references: [id])
    bio                String?
    specialties        Json?
    rating             Float    @default(0)
    reviews            Review[]
    isVerified         Boolean  @default(false)
    isPremium          Boolean  @default(false)
    featuredListing    Boolean  @default(false)
    enhancedVisibility Boolean  @default(false)
    premiumBadge       Boolean  @default(false)
  }

  model Message {
    id          String   @id @default(cuid())
    content     String
    senderId    String
    receiverId  String
    createdAt   DateTime @default(now())
    sender      User     @relation("SentMessages", fields: [senderId], references: [id])
    receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  }

  model Listing {
    id          String   @id @default(cuid())
    title       String
    description String
    price       Float
    category    String
    images      Json
    status      ListingStatus @default(ACTIVE)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    userId      String
    user        User     @relation(fields: [userId], references: [id])
  }

model Subscription {
  id                  String            @id @default(cuid())
  userId              String            @unique // Changé pour relation un-à-un
  user                User              @relation(fields: [userId], references: [id])
  tier                SubscriptionTier  @default(FREE)
  status              SubscriptionStatus
  stripeCustomerId    String?          @unique
  stripePriceId       String?
  stripeSubscriptionId String?         @unique
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean          @default(false)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}
  model Review {
    id          String   @id @default(cuid())
    rating      Int
    comment     String
    createdAt   DateTime @default(now())
    userId      String   
    conciergeId String   
    user        User     @relation("UserReviews", fields: [userId], references: [id])
    concierge   User     @relation("ReceivedReviews", fields: [conciergeId], references: [id])
    profile     Profile? @relation(fields: [conciergeId], references: [userId], map: "Review_profile_fkey")

    @@index([userId])
    @@index([conciergeId])
  }

  model Request {
    id          String   @id @default(cuid())
    service     String
    details     String
    status      String
    userId      String
    conciergeId String
    user        User     @relation("UserRequests", fields: [userId], references: [id])
    concierge   User     @relation("ConciergeRequests", fields: [conciergeId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
  }

  model Specialty {
    id          String   @id @default(cuid())
    name        String   @unique
    users       User[]   // Many-to-many relation with User
  }

  model PremiumFeatures {
    id                    String   @id @default(cuid())
    userId                String   @unique
    user                  User     @relation(fields: [userId], references: [id])
    prioritySupport       Boolean  @default(false)
    extendedAvailability Boolean  @default(false)
    customBranding       Boolean  @default(false)
    analyticsAccess      Boolean  @default(false)
    maxClientsCount      Int      @default(50)
    commissionRate       Float    @default(15)
    verifiedStatus       Boolean  @default(false)
    canSellProducts      Boolean  @default(true)
    canOfferServices     Boolean  @default(true)
    maxProductListings   Int      @default(50)
    maxServiceListings   Int      @default(20)
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
  }

  model Product {
    id          String      @id @default(cuid())
    name        String
    description String
    price       Float
    images      String?
    category    String
    inStock     Boolean     @default(true)
    conciergeId String
    concierge   User        @relation(fields: [conciergeId], references: [id])
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
  }

  model Service {
    id          String      @id @default(cuid())
    name        String
    description String
    price       Float
    duration    Int         // in minutes
    category    String
    available   Boolean     @default(true)
    conciergeId String
    concierge   User        @relation(fields: [conciergeId], references: [id])
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
  }

  enum UserRole {
    CLIENT
    CONCIERGE
    ADMIN
    USER
  }

  enum ListingStatus {
    ACTIVE
    SOLD
    ARCHIVED
  }

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}
enum SubscriptionTier {
  FREE
  PREMIUM
}
